from collections import deque

n, k = map(int, input().split())
a = deque(list(map(int, input().split())))  # 내구도
robot = deque([0] * n)  # 로봇 (0: 없음 / 1: 있음)

cnt = 0
while 1:
    cnt += 1
    # 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다: 벨트가 한 칸 회전하면 1번부터 2N-1번까지의 칸은 다음 번호의 칸이 있는 위치로 이동하고, 2N번 칸은 1번 칸의 위치로 이동한다.
    a.rotate(1)
    robot[n - 1] = 0
    robot.rotate(1)
    robot[n - 1] = 0  # 언제든지 로봇이 내리는 위치에 도달하면 그 즉시 내린다.
    # 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다. 만약 이동할 수 없다면 가만히 있는다.
    for i in range(n - 1):  # 맨 오른쪽 칸부터 (가장 먼저 벨트에 올라간 로봇부터)
        #   1. 로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도가 1 이상 남아 있어야 한다.
        if robot[n - i - 1] == 1 and robot[n - i] == 0 and a[n - i] >= 1:
            robot[n - i - 1] = 0
            robot[n - i] = 1
            a[n - i] -= 1  # 로봇이 어떤 칸으로 이동하면 그 칸의 내구도는 즉시 1만큼 감소한다.
    robot[n - 1] = 0  # 언제든지 로봇이 내리는 위치에 도달하면 그 즉시 내린다.
    # 3. 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다.
    if robot[0] != 1 and a[0] > 0:
        robot[0] = 1  # 로봇 올리기
        a[0] -= 1  # 로봇을 올리는 위치에 올리면 그 칸의 내구도는 즉시 1만큼 감소한다.
    # 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료한다. 그렇지 않다면 1번으로 돌아간다.
    if a.count(0) >= k:
        break

print(cnt)
